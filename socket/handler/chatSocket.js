const Message = require("../../model/MessageModel");
const User = require("../../model/UserModel"); // ‚úÖ to fetch sender name

function registerChatHandlers(io, socket) {
  // üîπ Listen for global chat messages
  socket.on("send-message", async (data) => {
    console.log("üí¨ Global chat message received:", data);

    try {
      // 1Ô∏è‚É£ Validate message text
      if (!data.text || !socket.user?.id) {
        return console.warn("‚ö†Ô∏è Invalid message or unauthenticated user");
      }

      // 2Ô∏è‚É£ Save message to DB (explicitly mark as global)
      const newMessage = await Message.create({
        message: data.text,
        UserId: socket.user.id,
        chatType: "global", // ‚úÖ only global chat messages handled here
      });

      // 3Ô∏è‚É£ Fetch user info for name
      const user = await User.findByPk(socket.user.id, {
        attributes: ["id", "name"],
      });

      // 4Ô∏è‚É£ Prepare clean payload for frontend
      const payload = {
        id: newMessage.id,
        message: newMessage.message,
        user: {
          id: user.id,
          name: user.name,
        },
        chatType: "global",
        createdAt: newMessage.createdAt.toISOString(),
      };

      // 5Ô∏è‚É£ Broadcast to all connected users (global room)
      io.emit("receive-message", payload);
    } catch (err) {
      console.error("‚ùå Error saving or broadcasting message:", err);
    }
  });
}

module.exports = registerChatHandlers;
